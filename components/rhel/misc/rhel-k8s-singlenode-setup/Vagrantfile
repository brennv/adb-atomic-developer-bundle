# -*- mode: ruby -*-
# vi: set ft=ruby :
REQUIRED_PLUGINS = %w(vagrant-service-manager  vagrant-registration vagrant-proxyconf)
errors = []

def message(name)
  "#{name} plugin is not installed, run `vagrant plugin install #{name}` to install it."
end
# Validate and collect error message if plugin is not installed
REQUIRED_PLUGINS.each { |plugin| errors << message(plugin) unless Vagrant.has_plugin?(plugin) }
unless errors.empty?
  msg = errors.size > 1 ? "Errors: \n* #{errors.join("\n* ")}" : "Error: #{errors.first}"
  fail Vagrant::Errors::VagrantError.new, msg
end

# Vagrantfile for single node k8s setup
Vagrant.configure(2) do |config|
  config.vm.box = "cdkv2"

  config.registration.username = ENV['SUB_USERNAME']
  config.registration.password = ENV['SUB_PASSWORD']

  config.vm.provider "libvirt" do |libvirt, override|
    libvirt.driver = "kvm"
    libvirt.memory = 1024
    libvirt.cpus = 2
  end

  config.vm.provider "virtualbox" do |vbox, override|
    vbox.memory = 1024
    vbox.cpus = 2

    # Enable use of more than one virtual CPU in a virtual machine.
    vbox.customize ["modifyvm", :id, "--ioapic", "on"]
  end
  config.vm.network "private_network", type: "dhcp"

  # Fix for ADB #334
  config.servicemanager.services = 'docker'

  if ENV.has_key?('HTTP_PROXY')
   HTTP_PROXY = ENV['HTTP_PROXY']
   config.vm.provision "shell", inline: <<-SHELL
      mkdir /etc/systemd/system/docker.service.d
      echo '[Service]' > /etc/systemd/system/docker.service.d/http-proxy.conf
      echo 'Environment="HTTP_PROXY=#{HTTP_PROXY}"' >> /etc/systemd/system/docker.service.d/http-proxy.conf
      sudo systemctl daemon-reload
      sudo systemctl restart docker
    SHELL
  end

  config.vm.provision "shell", inline: <<-SHELL
     sudo mkdir -p /etc/pki/kube-apiserver/
     sudo openssl genrsa -out /etc/pki/kube-apiserver/serviceaccount.key 2048 > /dev/null 2>&1
     sudo sed -i.back '/KUBE_API_ARGS=*/c\KUBE_API_ARGS="--service_account_key_file=/etc/pki/kube-apiserver/serviceaccount.key"' /etc/kubernetes/apiserver
     sudo sed -i.back '/KUBE_CONTROLLER_MANAGER_ARGS=*/c\KUBE_CONTROLLER_MANAGER_ARGS="--service_account_private_key_file=/etc/pki/kube-apiserver/serviceaccount.key"' /etc/kubernetes/controller-manager

     sudo systemctl enable etcd kube-apiserver kube-controller-manager kube-scheduler > /dev/null 2>&1
     sudo systemctl start etcd kube-apiserver kube-controller-manager kube-scheduler

     sudo systemctl enable kube-proxy kubelet > dev/null 2>&1
     sudo systemctl start kube-proxy kubelet
     sudo systemctl restart docker
  SHELL
end
